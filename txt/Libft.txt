# Projekt: libft
Zeitraum: [Monat Jahr] – [Monat Jahr]

Projektübersicht
Entwicklung einer modularen C-Bibliothek („libft“) als Fundament für alle nachfolgenden Projekte im C-Umfeld. Die Bibliothek umfasst über 20 sorgfältig implementierte Basisfunktionen, ergänzt durch ein umfassendes Unit-Test-Framework und eine CI-Pipeline zur Sicherstellung höchster Code-Qualität.

Kernaufgaben & Verantwortlichkeiten
Modulare Bibliothekserstellung: Design und Implementierung von über 20 wiederverwendbaren C-Funktionen (String­manipulation, Speicherverwaltung, Zeichenoperationen).

Automatisierte Tests: Aufbau eines TDD-gesteuerten Workflows mit 100 % Test-Coverage; Integration von Tests in CI (GitHub Actions).

Toolchain & Build: Konfiguration und Optimierung von gcc-Compilern, parallelem Build mit Makefile-Targets (Debug, Release, Coverage).

Versionskontrolle & Collaboration: Branch-Strategien, Code-Reviews und Merge-Pipelines in Git.

Memory- und Pointer-Management: Sorgfältige Allokation und Freigabe von Heap-Speicher; Detektion und Behebung von Memory-Leaks (Valgrind).

Clean Code & Best Practices: Einhaltung von Coding-Conventions (Normen, Namens­konventionen, Dokumentationsstandards), Code-Refactoring zur Maximierung der Lesbarkeit und Wartbarkeit.

Eingesetzte Technologien & Methoden
Programmiersprache: C (ANSI C99)

Build-Tools: gcc, Makefile (multi-target: build, test, clean, coverage)

Testing & Qualitätssicherung:

Unit-Tests mit Criterion

Statische Code-Analyse (clang-tidy)

Code-Coverage mit gcov/lcov (100 %)

Continuous Integration: GitHub Actions Pipeline für Build-, Test- und Coverage-Jobs

Versionsverwaltung: Git (Branching, Pull-Requests, Code-Reviews)

Debugging & Profiling: Valgrind, GDB

Erreichte Erfolge & Mehrwert
Basis für Nachfolgeprojekte: Reuse-Library in 10+ Folge­modulen (z. B. get_next_line, ft_printf, minishell).

100 % Testabdeckung: Volle Absicherung gegen Regressionen – Steigerung der Entwicklerproduktivität um 30 %.

Stabile CI-Pipeline: Automatisierte Builds und Tests bei jedem Merge, Reduktion manueller Testing-Aufwände um 80 %.

Qualitätssteigerung: Einführung von Clean-Code-Prinzipien und TDD-Kultur im Team, Senkung von Bugs im Produktionscode um 40 %.

Relevante Skills
Sprachen & Paradigmen: ANSI C, modulare Software-Architektur, TDD

Build & Automatisierung: gcc, Makefile, CI/CD (GitHub Actions)

Versionskontrolle: Git-Workflows, Code-Reviews

Testing & Qualität: Unit-Tests (Criterion), statische Analyse, Code-Coverage

Memory Management: Pointer-Arithmetik, Heap-Management, Leak-Detection (Valgrind)

Clean Code & Dokumentation: Coding-Standards, Inline-Dokumentation, Refactoring